{"version":3,"file":"manager.js","sourceRoot":"","sources":["../src/manager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\"\nimport * as path from \"path\"\nimport { emptyDir, readdir, readFile, readJson, writeFile } from \"fs-extra\"\nimport { Descriptor, Member, Variable } from \"./psi\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { Example, generate, JsDocGenerator, ModulePathMapper, TsToJsdocOptions } from \"./JsDocGenerator\"\n\nfunction computeModuleNameMappings(generator: JsDocGenerator) {\n  const mainModuleName = generator.moduleName\n  const mainPsi = generator.moduleNameToResult.get(mainModuleName!!)!!\n  const oldModulePathToNew = new Map<string, string>()\n  for (const [id, names] of generator.mainMappings) {\n    const psi = generator.moduleNameToResult.get(id)!!\n    for (const name of names) {\n      if (moveMember(psi.classes, mainPsi.classes, name, mainModuleName)) {\n        oldModulePathToNew.set(`module:${id}.${name}`, `module:${mainModuleName}.${name}`)\n        continue\n      }\n\n      moveMember(psi.functions, mainPsi.functions, name) || moveMember(psi.members, mainPsi.members, name)\n    }\n  }\n  return oldModulePathToNew\n}\n\nfunction moveMember<T extends Member>(members: Array<T>, mainPsiMembers: Array<T>, name: string, newId: string | null = null): boolean {\n  const index = members.findIndex(it => it.name === name)\n  if (index < 0) {\n    return false\n  }\n\n  const member = members[index]\n  if (newId != null) {\n    (<any>member).modulePath = \"module:\" + newId\n  }\n\n  mainPsiMembers.push(member)\n  members.splice(index, 1)\n  return true\n}\n\nexport async function generateAndWrite(basePath: string, config: ts.ParsedCommandLine, tsConfig: any) {\n  let packageData: any = {name: \"packageJsonNotDefined\"}\n  try {\n    packageData = await readJson(path.join(basePath, \"package.json\"))\n  }\n  catch (e) {\n  }\n\n  const options: TsToJsdocOptions = typeof tsConfig.jsdoc === \"string\" ? {out: tsConfig.jsdoc} : tsConfig.jsdoc\n  if (options.out == null) {\n    throw new Error(\"Please specify out in the tsConfig.jsdoc (https://github.com/develar/ts2jsdoc#generate-jsdoc-from-typescript)\")\n  }\n\n  const generator = generate(basePath, config, packageData.name, packageData == null ? null : packageData.main, options)\n\n  const out = path.resolve(basePath, options.out)\n  console.log(`Generating JSDoc to ${out}`)\n  await emptyDir(out)\n\n  const oldModulePathToNew = computeModuleNameMappings(generator)\n\n  const exampleDir = options.examples == null ? null : path.resolve(basePath, options.examples)\n  const existingClassExampleDirs = exampleDir == null ? null : new Set((await readdir(exampleDir)).filter(it => it[0] != \".\" && !it.includes(\".\")))\n\n  for (const [moduleId, psi] of generator.moduleNameToResult.entries()) {\n    const modulePathMapper: ModulePathMapper = oldPath => {\n      if (!oldPath.startsWith(\"module:\")) {\n        return oldPath\n      }\n\n      const result = oldModulePathToNew.get(oldPath)\n      if (result != null) {\n        return result\n      }\n\n      if (moduleId === generator.moduleName && options.externalIfNotMain != null) {\n        // external:electron-builder/out/platformPackager.PlatformPackager is not rendered by jsdoc2md,\n        // only PlatformPackager\n        const dotIndex = oldPath.lastIndexOf(\".\")\n        const value = oldPath.substring(dotIndex + 1)\n        externalToModuleName.set(value, oldPath.substring(oldPath.indexOf(\":\") + 1, dotIndex))\n        return `external:${value}`\n      }\n\n      return oldPath\n    }\n\n    let result = \"\"\n    const externalToModuleName = new Map<string, string>()\n    for (const d of copyAndSort(psi.members)) {\n      if ((<any>d).kind == null) {\n        result += generator.renderer.renderVariable(<Variable>d, modulePathMapper)\n      }\n      else {\n        result += generator.renderer.renderMember(<Descriptor>d)\n      }\n    }\n\n    for (const d of copyAndSort(psi.classes)) {\n      let examples: Array<Example> = []\n      if (existingClassExampleDirs != null && existingClassExampleDirs.has(d.name)) {\n        const dir = path.join(exampleDir!!, d.name)\n        examples = await BluebirdPromise.map((await readdir(dir)).filter(it => it[0] != \".\" && it.includes(\".\")), async it => {\n          const ext = path.extname(it)\n          return <Example>{\n            name: path.basename(it, ext),\n            content: await readFile(path.join(dir, it), \"utf8\"),\n            lang: ext\n          }\n        })\n      }\n\n      result += generator.renderer.renderClassOrInterface(d, modulePathMapper, examples)\n    }\n\n    for (const d of copyAndSort(psi.functions)) {\n      result += generator.renderer.renderMethod(d, modulePathMapper, null)\n    }\n\n    if (result === \"\") {\n      continue\n    }\n\n    let externalJsDoc = \"\"\n    for (const [external, moduleId] of externalToModuleName) {\n      externalJsDoc += `/**\\n* @external ${external}\\n* @see ${options.externalIfNotMain}#module_${moduleId}.${external}\\n*/\\n`\n    }\n\n    await writeFile(path.join(out, moduleId.replace(/\\//g, \"-\") + \".js\"), `${externalJsDoc}/** \n * @module ${moduleId}\n */\n\n${result}`)\n  }\n}\n\nfunction copyAndSort<T extends Member>(members: Array<T>): Array<T> {\n  return members.slice().sort((a, b) => a.name.localeCompare(b.name))\n}"]}