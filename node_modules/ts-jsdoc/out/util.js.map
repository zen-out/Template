{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\"\nimport * as path from \"path\"\nimport { readFile } from \"fs-extra\"\nimport BluebirdPromise from \"bluebird-lst\"\n\nexport function transpile(transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>) {\n  const paths = process.argv.slice(2)\n  if (paths.length == 0) {\n    paths.push(process.cwd())\n  }\n  return transpilePaths(paths, transpilator)\n}\n\nexport function transpilePaths(paths: Array<string>, transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>) {\n  return BluebirdPromise.map(paths, basePath => {\n    return build(basePath, transpilator)\n      .catch(e => {\n        if (e == null) {\n          return\n        }\n\n        if (!(e instanceof CompilationError)) {\n          throw e\n        }\n\n        for (const diagnostic of e.errors) {\n          if (diagnostic.file == null) {\n            console.log(diagnostic.messageText)\n            continue\n          }\n\n          const location = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!!)\n          const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, \"\\n\")\n          console.log(`${diagnostic.file.fileName} (${location.line + 1}, ${location.character + 1}): ${message}`)\n        }\n        process.exit(-1)\n        return\n      })\n  })\n}\n\nasync function build(basePath: string, transpilator: (basePath: string, config: ts.ParsedCommandLine, tsConfig: any) => Promise<any>) {\n  const tsConfigPath = path.join(basePath, \"tsconfig.json\")\n  const jsonResult = ts.parseConfigFileTextToJson(tsConfigPath, await readFile(tsConfigPath, \"utf8\"))\n  if (jsonResult.error != null) {\n    throw new CompilationError([jsonResult.error])\n  }\n\n  const result = ts.parseJsonConfigFileContent(jsonResult.config, ts.sys, basePath)\n  checkErrors(result.errors)\n\n  await transpilator(basePath, result, jsonResult.config)\n}\n\nexport function checkErrors(errors: ReadonlyArray<ts.Diagnostic>): void {\n  if (errors.length !== 0) {\n    throw new CompilationError(errors)\n  }\n}\n\nclass CompilationError extends Error {\n  constructor(public errors: ReadonlyArray<ts.Diagnostic>) {\n    super(\"Compilation error\")\n  }\n}\n\nexport function processTree(sourceFile: ts.SourceFile, replacer: (node: ts.Node) => boolean): void {\n  function visit(node: ts.Node) {\n    if (node.flags & ts.ModifierFlags.Private) {\n      // skip private nodes\n      return\n    }\n\n    if (!replacer(node)) {\n      ts.forEachChild(node, visit)\n    }\n  }\n\n  visit(sourceFile)\n}"]}