{"version":3,"file":"JsDocGenerator.js","sourceRoot":"","sources":["../src/JsDocGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\"\nimport * as path from \"path\"\nimport { JsDocRenderer } from \"./JsDocRenderer\"\nimport { checkErrors, processTree } from \"./util\"\nimport { Class, Descriptor, MethodDescriptor, Property, SourceFileDescriptor, SourceFileModuleInfo, Type, Variable } from \"./psi\"\nimport { Annotation, parse as parseJsDoc } from \"doctrine\"\n\nexport interface TsToJsdocOptions {\n  readonly out: string\n  readonly externalIfNotMain?: string | null\n  readonly access?: string | null\n\n  /**\n   * The path to examples dir.\n   */\n  readonly examples?: string | null\n}\n\nconst vm = require(\"vm\")\n\nexport type ModulePathMapper = (oldPath: string) => string\n\nexport function generate(basePath: string, config: ts.ParsedCommandLine, moduleName: string, main: string | null, options: TsToJsdocOptions): JsDocGenerator {\n  const compilerOptions = config.options\n  const compilerHost = ts.createCompilerHost(compilerOptions)\n  const program = ts.createProgram(config.fileNames, compilerOptions, compilerHost)\n  checkErrors(ts.getPreEmitDiagnostics(program))\n\n  const compilerOutDir = compilerOptions.outDir\n  if (compilerOutDir == null) {\n    throw new Error(\"outDir is not specified in the compilerOptions\")\n  }\n\n  const generator = new JsDocGenerator(program, path.relative(basePath, compilerOutDir), moduleName, main, (<any>program).getCommonSourceDirectory(), options, path.resolve(compilerOptions.baseUrl!!))\n  for (const sourceFile of program.getSourceFiles()) {\n    if (!sourceFile.isDeclarationFile) {\n      generator.generate(sourceFile)\n    }\n  }\n  return generator\n}\n\nexport class JsDocGenerator {\n  readonly moduleNameToResult = new Map<string, SourceFileDescriptor>()\n\n  private currentSourceModuleId: string = \"\"\n  readonly renderer = new JsDocRenderer(this)\n\n  readonly mainMappings = new Map<string, Array<string>>()\n\n  constructor(readonly program: ts.Program,\n              readonly relativeOutDir: string,\n              readonly moduleName: string | null,\n              private readonly mainFile: string | null,\n              private readonly commonSourceDirectory: string,\n              private readonly options: TsToJsdocOptions,\n              private readonly baseUrl?: string) {\n  }\n\n  private sourceFileToModuleId(sourceFile: ts.SourceFile): SourceFileModuleInfo {\n    if (sourceFile.isDeclarationFile) {\n      if (sourceFile.fileName.endsWith(\"node.d.ts\")) {\n        return {id: \"node\", isMain: false}\n      }\n\n      let fileNameWithoutExt = sourceFile.fileName.slice(0, sourceFile.fileName.length - \".d.ts\".length).replace(/\\\\/g, \"/\")\n      if (this.baseUrl != null && fileNameWithoutExt.startsWith(this.baseUrl)) {\n        fileNameWithoutExt = fileNameWithoutExt.substring(this.baseUrl.length + 1)\n      }\n      return {id: fileNameWithoutExt, isMain: false}\n    }\n\n    let sourceModuleId: string\n    const fileNameWithoutExt = sourceFile.fileName.slice(0, sourceFile.fileName.lastIndexOf(\".\")).replace(/\\\\/g, \"/\")\n    const name = path.relative(this.commonSourceDirectory, fileNameWithoutExt)\n    if (this.moduleName != null) {\n      sourceModuleId = this.moduleName\n      if (name !== \"index\") {\n        sourceModuleId += \"/\" + this.relativeOutDir\n      }\n    }\n    else {\n      sourceModuleId = this.relativeOutDir\n    }\n\n    if (name !== \"index\") {\n      sourceModuleId += \"/\" + name\n    }\n\n    const isMain = this.mainFile == null ? fileNameWithoutExt.endsWith(\"/main\") : `${fileNameWithoutExt}.js`.includes(path.posix.relative(this.relativeOutDir, this.mainFile))\n    if (isMain) {\n      sourceModuleId = this.moduleName!!\n    }\n    return {id: sourceModuleId, isMain}\n  }\n\n  generate(sourceFile: ts.SourceFile): void {\n    if (sourceFile.text.length === 0) {\n      return\n    }\n\n    const moduleId = this.sourceFileToModuleId(sourceFile)\n    this.currentSourceModuleId = moduleId.id\n\n    const classes: Array<Class> = []\n    const functions: Array<MethodDescriptor> = []\n    const members: Array<Variable | Descriptor> = []\n\n    processTree(sourceFile, (node) => {\n      if (node.kind === ts.SyntaxKind.InterfaceDeclaration || node.kind === ts.SyntaxKind.ClassDeclaration) {\n        const descriptor = this.processClassOrInterface(node)\n        if (descriptor != null) {\n          classes.push(descriptor)\n        }\n      }\n      else if (node.kind === ts.SyntaxKind.FunctionDeclaration) {\n        const descriptor = this.describeFunction(<ts.FunctionDeclaration>node)\n        if (descriptor != null) {\n          functions.push(descriptor)\n        }\n      }\n      else if (moduleId.isMain && node.kind === ts.SyntaxKind.ExportDeclaration) {\n        this.handleExportFromMain(<ts.ExportDeclaration>node)\n        return true\n      }\n      else if (node.kind === ts.SyntaxKind.SourceFile) {\n        return false\n      }\n      else if (node.kind === ts.SyntaxKind.VariableStatement) {\n        const descriptor = this.describeVariable(<ts.VariableStatement>node)\n        if (descriptor != null) {\n          members.push(descriptor)\n        }\n      }\n      else if (node.kind === ts.SyntaxKind.EnumDeclaration) {\n        const descriptor = this.describeEnum(<ts.EnumDeclaration>node)\n        if (descriptor != null) {\n          members.push(descriptor)\n        }\n      }\n      return true\n    })\n\n    const existingPsi = this.moduleNameToResult.get(moduleId.id)\n    if (existingPsi == null) {\n      this.moduleNameToResult.set(moduleId.id, {classes, functions, members})\n    }\n    else {\n      existingPsi.classes.push(...classes)\n      existingPsi.functions.push(...functions)\n      existingPsi.members.push(...members)\n    }\n  }\n\n  private handleExportFromMain(node: ts.ExportDeclaration) {\n    const moduleSpecifier = node.moduleSpecifier\n    const exportClause = node.exportClause\n    if (exportClause == null || moduleSpecifier == null) {\n      return\n    }\n\n    if (moduleSpecifier.kind !== ts.SyntaxKind.StringLiteral) {\n      return\n    }\n\n    const filePath = (<ts.StringLiteral>moduleSpecifier).text\n    if (!filePath.startsWith(\".\")) {\n      return\n    }\n\n    const fullFilename = path.posix.resolve(path.posix.dirname(node.getSourceFile().fileName), filePath) + \".ts\"\n    const sourceFile = this.program.getSourceFile(fullFilename)\n    if (sourceFile == null) {\n      return\n    }\n\n    const names: Array<string> = []\n    for (const e of (exportClause as any).elements) {\n      if (e.kind === ts.SyntaxKind.ExportSpecifier) {\n        names.push((<ts.Identifier>(<ts.ExportSpecifier>e).name).text)\n      }\n      else {\n        console.error(`Unsupported export element: ${e.getText(e.getSourceFile())}`)\n      }\n    }\n\n    this.mainMappings.set(this.sourceFileToModuleId(sourceFile).id, names)\n  }\n\n  getTypeNamePathByNode(node: ts.Node): Array<string | Type> | null {\n    if (node.kind === ts.SyntaxKind.UnionType) {\n      return this.typesToList((<ts.UnionType>(<any>node)).types, node)\n    }\n    else if (node.kind === ts.SyntaxKind.FunctionType) {\n      return [\"callback\"]\n    }\n    else if (node.kind === ts.SyntaxKind.NumberKeyword) {\n      return [\"number\"]\n    }\n    else if (node.kind === ts.SyntaxKind.StringKeyword) {\n      return [\"string\"]\n    }\n    else if (node.kind === ts.SyntaxKind.BooleanKeyword) {\n      return [\"boolean\"]\n    }\n    else if (node.kind === ts.SyntaxKind.NullKeyword) {\n      return [\"null\"]\n    }\n    else if (node.kind === ts.SyntaxKind.UndefinedKeyword) {\n      return [\"undefined\"]\n    }\n    else if (node.kind === ts.SyntaxKind.LiteralType) {\n      const text = (<ts.LiteralLikeNode>(<any>(<ts.LiteralTypeNode>node).literal)).text\n      return [`\"${text}\"`]\n    }\n    else if (node.kind === ts.SyntaxKind.TypeLiteral) {\n      // todo\n      return ['Object.<string, any>']\n    }\n\n    const type = this.program.getTypeChecker().getTypeAtLocation(node)\n    return type == null ? null : this.getTypeNames(type, node)\n  }\n\n  private typesToList(types: Array<ts.Type>, node: ts.Node) {\n    const typeNames: Array<string | Type> = []\n    for (const type of types) {\n      if ((<any>type).kind == null) {\n        const name = this.getTypeNamePath(<any>type)\n        if (name == null) {\n          throw new Error(`Cannot get name for ${node.getText(node.getSourceFile())}`)\n        }\n        typeNames.push(name)\n      }\n      else {\n        const name = this.getTypeNamePathByNode(<any>type)\n        if (name == null) {\n          throw new Error(`Cannot get name for ${node.getText(node.getSourceFile())}`)\n        }\n        typeNames.push(...name)\n      }\n    }\n    return typeNames\n  }\n\n  getTypeNames(type: ts.Type, node: ts.Node): Array<string | Type> | null {\n    if (type.flags & ts.TypeFlags.UnionOrIntersection && !(type.flags & ts.TypeFlags.Enum) && !(type.flags & ts.TypeFlags.EnumLiteral) && !(type.flags & ts.TypeFlags.Boolean) && !(type.flags & ts.TypeFlags.BooleanLiteral)) {\n      return this.typesToList((<ts.UnionOrIntersectionType>type).types, node)\n    }\n\n    let result = this.getTypeNamePath(type)\n    if (result == null) {\n      return null\n    }\n\n    const typeArguments = (<ts.TypeReference>type).typeArguments\n    if (typeArguments != null) {\n      const subTypes = []\n      for (const type of typeArguments) {\n        const typeNames = this.getTypeNames(type, node)\n        if (typeNames != null) {\n          subTypes.push(...typeNames)\n        }\n      }\n      return [{name: result, subTypes: subTypes}]\n    }\n    return [result]\n  }\n\n  getTypeNamePath(type: ts.Type): string | null {\n    if (type.flags & ts.TypeFlags.Boolean) {\n      return \"boolean\"\n    }\n    if (type.flags & ts.TypeFlags.Void) {\n      return \"void\"\n    }\n    if (type.flags & ts.TypeFlags.Null) {\n      return \"null\"\n    }\n    if (type.flags & ts.TypeFlags.String) {\n      return \"string\"\n    }\n    if (type.flags & ts.TypeFlags.Number) {\n      return \"number\"\n    }\n    if (type.flags & ts.TypeFlags.Undefined) {\n      return \"undefined\"\n    }\n    if (type.flags & ts.TypeFlags.Any) {\n      return \"any\"\n    }\n    if (type.flags & ts.TypeFlags.Literal) {\n      return `\"${(<ts.LiteralType>type).value}\"`\n    }\n\n    const symbol = type.symbol\n    if (symbol == null || symbol.declarations == null || symbol.declarations.length === 0) {\n      return null\n    }\n\n    const valueDeclaration = (symbol.valueDeclaration || ((symbol.declarations == null || symbol.declarations.length === 0) ? null : symbol.declarations[0]))!!\n    if (ts.getCombinedModifierFlags(valueDeclaration) & ts.ModifierFlags.Ambient) {\n      // Error from lib.es5.d.ts\n      return symbol.name\n    }\n\n    let typeSourceParent: ts.Node | null | undefined = valueDeclaration\n    while (typeSourceParent != null) {\n      if (typeSourceParent.kind === ts.SyntaxKind.ModuleDeclaration && (typeSourceParent.flags & ts.NodeFlags.NestedNamespace) <= 0) {\n        const m = <ts.ModuleDeclaration>typeSourceParent\n        const sourceModuleId = (<ts.Identifier>m.name).text\n        if (typeSourceParent.flags & ts.NodeFlags.Namespace) {\n          return `${sourceModuleId}:${symbol.name}`\n        }\n        else {\n          return `module:${sourceModuleId}.${symbol.name}`\n        }\n      }\n      else if (typeSourceParent.kind === ts.SyntaxKind.SourceFile) {\n        const sourceModuleId = this.sourceFileToModuleId(<ts.SourceFile>typeSourceParent).id\n        return `module:${sourceModuleId}.${symbol.name}`\n      }\n\n      typeSourceParent = typeSourceParent.parent\n    }\n\n    console.warn(`Cannot find parent for ${symbol}`)\n    return null\n  }\n\n  private describeEnum(node: ts.EnumDeclaration): Descriptor | null {\n    const flags = ts.getCombinedModifierFlags(node)\n    if (!(flags & ts.ModifierFlags.Export)) {\n      return null\n    }\n\n    const type = {\n      names: [\"number\"]\n    }\n\n    const name = (<ts.Identifier>node.name).text\n    const moduleId = this.computeTypePath()\n    const id = `${moduleId}.${name}`\n\n    const properties: Array<Descriptor> = []\n    for (const member of node.members) {\n      const name = (<ts.Identifier>member.name).text\n      properties.push({\n        name: name,\n        kind: \"member\",\n        scope: \"static\",\n        memberof: id,\n        type: type,\n      })\n    }\n\n    // we don't set readonly because it is clear that enum is not mutable\n    // e.g. jsdoc2md wil add useless \"Read only: true\"\n    // noinspection SpellCheckingInspection\n    return {\n      node: node,\n      id: id,\n      name: name,\n      longname: id,\n      kind: \"enum\",\n      scope: \"static\",\n      memberof: moduleId,\n      type: type,\n      properties: properties,\n    }\n  }\n\n  private describeVariable(node: ts.VariableStatement): Variable | null {\n    const declarations = node.declarationList == null ? null : node.declarationList.declarations\n    if (declarations == null || declarations.length !== 1) {\n      return null\n    }\n\n    const flags = ts.getCombinedModifierFlags(declarations[0])\n    if (!(flags & ts.ModifierFlags.Export)) {\n      return null\n    }\n\n    const declaration = <ts.VariableDeclaration>declarations[0]\n    if (declaration.type == null) {\n      return null\n    }\n\n    const existingJsDoc = JsDocRenderer.getComment(node)\n    const jsDoc = existingJsDoc == null ? null : parseJsDoc(existingJsDoc, {unwrap: true})\n    if (JsDocGenerator.isHidden(jsDoc)) {\n      return null\n    }\n\n    let types\n    const type = this.program.getTypeChecker().getTypeAtLocation(declaration)\n    if (type.symbol != null && type.symbol.valueDeclaration != null) {\n      types = [this.getTypeNamePath(type)!!]\n    }\n    else {\n      types = this.getTypeNamePathByNode(declaration.type)!!\n    }\n\n    // NodeFlags.Const on VariableDeclarationList, not on VariableDeclaration\n    return {types, node, name: (<ts.Identifier>declaration.name).text, isConst: (node.declarationList.flags & ts.NodeFlags.Const) > 0}\n  }\n\n  //noinspection JSMethodCanBeStatic\n  private describeFunction(node: ts.FunctionDeclaration): MethodDescriptor | null {\n    const flags = ts.getCombinedModifierFlags(node)\n    if (!(flags & ts.ModifierFlags.Export)) {\n      return null\n    }\n\n    const existingJsDoc = JsDocRenderer.getComment(node)\n    const jsDoc = existingJsDoc == null ? null : parseJsDoc(existingJsDoc, {unwrap: true})\n    return JsDocGenerator.isHidden(jsDoc) ? null : {name: (node.name as ts.Identifier).text, node: node, tags: [], jsDoc }\n  }\n\n  private static isHidden(jsDoc: Annotation | null): boolean {\n    if (jsDoc == null) {\n      return false\n    }\n\n    for (const tag of jsDoc.tags) {\n      if (tag.title === \"internal\" || tag.title === \"private\") {\n        return true\n      }\n    }\n    return false\n  }\n\n  private processClassOrInterface(node: ts.Node): Class | null {\n    const flags = ts.getCombinedModifierFlags(node as ts.Declaration)\n    if (!(flags & ts.ModifierFlags.Export)) {\n      return null\n    }\n\n    const nodeDeclaration = <ts.InterfaceDeclaration>node\n\n    const existingJsDoc = JsDocRenderer.getComment(node)\n    const jsDoc = existingJsDoc == null ? null : parseJsDoc(existingJsDoc, {unwrap: true})\n    if (JsDocGenerator.isHidden(jsDoc)) {\n      return null\n    }\n\n    const className = (<ts.Identifier>nodeDeclaration.name).text\n\n    const clazz = <ts.ClassDeclaration>node\n    let parents: Array<string | Type> = []\n    if (clazz.heritageClauses != null) {\n      for (const heritageClause of clazz.heritageClauses) {\n        if (heritageClause.types != null) {\n          for (const type of heritageClause.types) {\n            const typeNamePath = this.getTypeNamePathByNode(type)\n            if (typeNamePath != null) {\n              parents = parents.concat(typeNamePath)\n            }\n          }\n        }\n      }\n    }\n\n    const methods: Array<MethodDescriptor> = []\n    const properties: Array<Property> = []\n    for (const member of nodeDeclaration.members) {\n      if (member.kind === ts.SyntaxKind.PropertySignature) {\n        const p = this.describeProperty(<any>member, node.kind === ts.SyntaxKind.ClassDeclaration)\n        if (p != null) {\n          properties.push(p)\n        }\n      }\n      else if (member.kind === ts.SyntaxKind.PropertyDeclaration) {\n        const p = this.describeProperty(<any>member, node.kind === ts.SyntaxKind.ClassDeclaration)\n        if (p != null) {\n          properties.push(p)\n        }\n      }\n      else if (member.kind === ts.SyntaxKind.GetAccessor) {\n        const p = this.describeProperty(<any>member, node.kind === ts.SyntaxKind.ClassDeclaration)\n        if (p != null) {\n          properties.push(p)\n        }\n      }\n      else if (member.kind === ts.SyntaxKind.MethodDeclaration || member.kind === ts.SyntaxKind.MethodSignature) {\n        const m = this.renderMethod(<any>member)\n        if (m != null) {\n          methods.push(m)\n        }\n      }\n    }\n\n    methods.sort((a, b) => {\n      let weightA = a.isProtected ? 100 : 0\n      let weightB = b.isProtected ? 100 : 0\n\n      // do not reorder getFeedURL/setFeedURL\n      weightA += trimMutatorPrefix(a.name).localeCompare(trimMutatorPrefix(b.name))\n      return weightA - weightB\n    })\n\n    return {\n      modulePath: this.computeTypePath(),\n      name: className,\n      node, methods, properties, parents,\n      isInterface: node.kind === ts.SyntaxKind.InterfaceDeclaration\n    }\n  }\n\n  private describeProperty(node: ts.PropertySignature | ts.PropertyDeclaration, isParentClass: boolean): Property | null {\n    const flags = ts.getCombinedModifierFlags(node)\n    if (flags & ts.ModifierFlags.Private) {\n      return null\n    }\n    if (this.options.access === \"public\" && flags & ts.ModifierFlags.Protected) {\n      return null\n    }\n\n    const name = (<ts.Identifier>node.name).text\n\n    let types: Array<string | Type>\n    if (node.type == null) {\n      const type = this.program.getTypeChecker().getTypeAtLocation(node)\n      if (type == null) {\n        return null\n      }\n      types = this.getTypeNames(type, node)!!\n    }\n    else {\n      types = this.getTypeNamePathByNode(node.type)!!\n    }\n\n    let isOptional = node.questionToken != null\n    let defaultValue = null\n    const initializer = node.initializer\n    if (initializer != null) {\n      const initializerText = initializer.getText()\n      if ((<any>initializer).expression != null || (<ts.Node>initializer).kind === ts.SyntaxKind.NoSubstitutionTemplateLiteral || initializerText.includes(\"process.stdout\")) {\n        defaultValue = initializerText\n      }\n      else {\n        try {\n          const sandbox = {sandboxVar: null as any}\n          vm.runInNewContext(`sandboxVar=${initializerText}`, sandbox)\n\n          const val = sandbox.sandboxVar\n          if (val === null || typeof val === \"string\" || typeof val === \"number\" || \"boolean\" || Object.prototype.toString.call(val) === \"[object Array]\") {\n            defaultValue = val\n          }\n          else if (val) {\n            console.warn(`unknown initializer for property ${name}: ${val}`)\n          }\n        }\n        catch (e) {\n          console.info(`exception evaluating \"${initializerText}\" for property ${name}`)\n          defaultValue = initializerText\n        }\n      }\n    }\n\n    isOptional = isOptional || defaultValue != null || types!.includes(\"null\")\n    if (!isOptional && isParentClass && (flags & ts.ModifierFlags.Readonly) > 0) {\n      isOptional = true\n    }\n    return {name, types, node, isOptional, defaultValue}\n  }\n\n  private renderMethod(node: ts.SignatureDeclaration): MethodDescriptor | null {\n    // node.flags doesn't report correctly for private methods\n    const flags = ts.getCombinedModifierFlags(node)\n    if (flags & ts.ModifierFlags.Private) {\n      return null\n    }\n    if (this.options.access === \"public\" && flags & ts.ModifierFlags.Protected) {\n      return null\n    }\n\n    const tags = []\n\n    const isProtected = (flags & ts.ModifierFlags.Protected) > 0\n    if (isProtected) {\n      tags.push(`@protected`)\n    }\n\n    const name = (<ts.Identifier>node.name).text\n    const existingJsDoc = JsDocRenderer.getComment(node)\n    const jsDoc = existingJsDoc == null ? null : parseJsDoc(existingJsDoc, {unwrap: true})\n    return JsDocGenerator.isHidden(jsDoc) ? null : {name, tags, isProtected, node, jsDoc}\n  }\n\n  private computeTypePath(): string {\n    return `module:${this.currentSourceModuleId}`\n  }\n}\n\nfunction trimMutatorPrefix(name: string) {\n  if (name.length > 4 && name[3] === name[3].toUpperCase() && (name.startsWith(\"get\") || name.startsWith(\"set\"))) {\n    return name[3].toLowerCase() + name.substring(4)\n  }\n  return name\n}\n\nexport interface Example {\n  name: string\n  content: string\n  lang: string\n}"]}